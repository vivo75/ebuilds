#! /usr/bin/python3

import os
import sys
import subprocess
import json
import pathlib

sys.path = [pathlib.Path(__file__).resolve().parent]+sys.path
from consts.ebuilds import EBUILDS_KEEP_ALL

"""
# generate EBUILDS_KEEP_ALL:
find /srv/raid0/gentoo-repos/ebuilds \
     -mindepth 2 \
     -maxdepth 2 \
     -type d \
| sed -e 's:^/srv/raid0/gentoo-repos/ebuilds/::' \
| sort -u \
| grep -v \
    -e '^.git/' \
    -e '^profiles/' \
    -e '^metadata/' \
    -e '^eclass/' \
    -e '^scripts/' \
    -e '^acct-group/' \
    -e '^acct-user/' \
    -e '^app-metrics/' \
    -e '^app-portage/' \
    -e '^virtual/' \
    -e '^app-admin/smalltools$' \
    -e '^app-backup/zfs-auto-snapshot$' \
    -e '^app-text/poppler-svg$' \
    -e '^dev-python/marshmallow-sqlalchemy$' \
    -e '^dev-python/clientcookie$' \
    -e '^dev-python/jonpy$' \
    -e '^dev-python/relatorio$' \
    -e '^dev-util/flatpak-builder$' \
    -e '^kde-apps/kcontacts$' \
    -e '^net-libs/libgmail$' \
    -e '^net-misc/lxc-fake-net$' \
    -e '^sys-apps/flatpak$' \
    -e '^sys-apps/xdg-desktop-portal-gtk$' \
    -e '^sys-fs/libostree$' \
| sed -e "s:^.*$:    '\0',:"
"""

REPOS_DIR = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), '..', '..'))
# git clone --shallow-since=2019-01-01 --no-single-branch --branch=stable  https://anongit.gentoo.org/git/repo/sync/gentoo.git
UPSTREAM_REPO_PATH = os.path.join(REPOS_DIR, 'gentoo')
EBUILDS_REPO_PATH = os.path.join(REPOS_DIR, 'ebuilds')

KEEP_PYTHON_VER = (
    'certifi',
    'gst-python',
    'nose',
    'setuptools',
    'gemato',
    'pexpect',
    'mako',
    'psutil',
    )

ADDITIONAL_DIRS = (
    'eclass',
    'licenses',
    'profiles/arch',
    'profiles/base',
    'profiles/default',
    'profiles/desc',
    'profiles/embedded',
    'profiles/hardened',
    'profiles/prefix',
    'profiles/releases',
    'profiles/targets',
    'profiles/updates',
    'metadata',
    )

NODELETE_DIRS = ('profiles', 'scripts', )

#categories_removed = (
    #'app-emacs', 'app-leechcraft', 'app-pda', 'app-xemacs', 'dev-ada', 'dev-dotnet', 'dev-erlang', 'dev-games',
    #'dev-haskell', 'dev-lisp', 'dev-lua', 'dev-ros', 'dev-tex', 'dev-texlive', 'games-arcade', 'games-board',
    #'games-emulation', 'games-engines', 'games-fps', 'games-kids', 'games-misc', 'games-mud', 'games-puzzle',
    #'games-roguelike', 'games-rpg', 'games-simulation', 'games-sports', 'games-util', 'gnustep-apps', 'gnustep-base',
    #'gnustep-libs', 'gui-apps', 'gui-libs', 'gui-wm', 'mate-base', 'mate-extra', 'media-radio', 'media-tv',
    #'net-news', 'net-nntp', 'net-p2p', 'net-voip', 'ros-meta', 'sci-astronomy', 'sci-biology', 'sci-calculators',
    #'sci-chemistry', 'sci-electronics', 'sci-misc', 'sci-physics', 'sec-policy', 'sys-freebsd', 'xfce-base',
    #'xfce-extra',
    #)

CATEGORIES_KEEP_ALL = (
    'acct-group',
    'acct-user',
    'app-metrics',
    'app-portage',
    'virtual',
    )

ebuilds_overlay = (
    'app-admin/smalltools',
    'app-backup/zfs-auto-snapshot',
    'app-text/poppler-svg',
    'dev-python/marshmallow-sqlalchemy',
    'dev-python/clientcookie',
    'dev-python/jonpy',
    'dev-python/photohash',
    'dev-python/pystache',
    'dev-python/relatorio',
    'dev-util/flatpak-builder',
    'games-board/python-chess',
    'kde-apps/kcontacts',
    'net-libs/libgmail',
    'net-misc/lxc-fake-net',
    'sys-apps/flatpak',
    'sys-apps/xdg-desktop-portal-gtk',
    'sys-fs/libostree',
    'dev-python/twisted',
    'dev-python/pathlib2',
    'dev-python/nose',
    'dev-python/mako',
    'dev-python/gst-python',
    'x11-wm/xpra',
    )

#EBUILDS_KEEP_ALL = (
#    'x11-wm/openbox',
#)

def rsync(src, dst, delete=True, capture_output=False, check=True):
    cmd = ['rsync', '-rt', '--update', '--inplace', '--exclude=*-9999*', "--exclude=metadata/layout.conf", ]
    if delete:
        cmd += ['--delete', ]
    cmd += [
           src + os.sep,
           dst + os.sep,
           ]
    os.makedirs(dst, 0o755, exist_ok=True)
    return subprocess.run(cmd,
                          capture_output=capture_output,
                          cwd=UPSTREAM_REPO_PATH,
                          timeout=120,
                          check=check)


def update_python_compat(cat, pkg, ebuild):
    if pkg in KEEP_PYTHON_VER:
        return
    new_python_compat = []
    ret = subprocess.run(['grep', '-qm', '1', '^PYTHON_COMPAT=.*)', ebuild], check=False)
    if ret.returncode == 0:
        cmd = ['env', '-i',
               'bash',
               '-c', '''function inherit() { :; }  ; source '%s' 2> /dev/null; echo -n ${PYTHON_COMPAT[@]}''' % ebuild, ]
        ret = subprocess.run(cmd,
                    capture_output=True,
                    timeout=5,
                    check=False)
        expanded_compat = ret.stdout.decode('ascii').strip()
        if expanded_compat in ('python3_8 python3_7', 'python3_8 python3_7 pypy3', 'python2_7'):
            return

        print(os.path.join(cat,pkg), end=' : ')
        # if ebuild support at least one version of py3 than we suppose it support all
        if expanded_compat.find('python3_') >= 0:
            new_python_compat.append('python{3_8,3_7}')
        # pypy3 is different enough to trust gentoo upstream
        if expanded_compat.find('pypy3') >= 0:
            new_python_compat.append('pypy3')

        # if there is no py3 support but py2 exist, then use it
        if not new_python_compat and expanded_compat.find('python2_') >= 0:
            new_python_compat = [ 'python2_7', ]
        print('PYTHON_COMPAT=%s' % ' '.join(new_python_compat))

        cmd = ['sed',
               '-e', 's/^PYTHON_COMPAT=.*)/PYTHON_COMPAT=( %s )/' % ' '.join(new_python_compat),
               '-i', ebuild, ]
        subprocess.run(cmd, check=True)


# update gentoo repo
ret = subprocess.run(['git', 'rev-parse', '--verify', 'HEAD'], capture_output=True, cwd=UPSTREAM_REPO_PATH, check=True)
oldGitHead = ret.stdout.strip().decode('ascii')
ret = subprocess.run(['git', 'fetch', '-a'], capture_output=False, cwd=UPSTREAM_REPO_PATH, timeout=300, check=True)
ret = subprocess.run(['git', 'pull'], capture_output=False, cwd=UPSTREAM_REPO_PATH, timeout=300, check=True)
ret = subprocess.run(['git', 'rev-parse', '--verify', 'HEAD'], capture_output=True, cwd=UPSTREAM_REPO_PATH, check=True)
newGitHead = ret.stdout.strip().decode('ascii')
if False and oldGitHead == newGitHead:
    print("git HEAD already @ %s" % str(newGitHead))
    sys.exit(0)

# we get everything from some categories
for cat in CATEGORIES_KEEP_ALL:
    rsync(os.path.join(UPSTREAM_REPO_PATH, cat),
          os.path.join(EBUILDS_REPO_PATH, cat))

# but some have too many packages, choose them wisely
for pkg in EBUILDS_KEEP_ALL:
    if os.path.exists(os.path.join(UPSTREAM_REPO_PATH, pkg)):
        rsync(os.path.join(UPSTREAM_REPO_PATH, pkg),
              os.path.join(EBUILDS_REPO_PATH, pkg))
    else:
        print( "WARNING: package %s not found in upstram repo" % pkg)

# There are also other kind of important directories
for cat in ADDITIONAL_DIRS:
    rsync(os.path.join(UPSTREAM_REPO_PATH, cat),
          os.path.join(EBUILDS_REPO_PATH, cat),)

for cat in NODELETE_DIRS:
    rsync(os.path.join(UPSTREAM_REPO_PATH, cat),
          os.path.join(EBUILDS_REPO_PATH, cat),
          delete=False, )

# add some metadata for later use
with open(os.path.join(EBUILDS_REPO_PATH, 'metadata', 'gentoo2ebuilds.json'), 'wt') as f:
    json.dump({
        'upstream_head' : newGitHead,
        }, f)

# Walk the tree for ebuild updates
with os.scandir(EBUILDS_REPO_PATH) as categories:
    for cat in [x for x in categories if x.is_dir() and (str(x.name).find('-') > 1 or x.name == 'virtual')]:
        with os.scandir(cat.path) as packages:
            for pkg in [x for x in packages if x.is_dir()]:
                with os.scandir(pkg.path) as ebuilds:
                    for ebuild in [x for x in ebuilds if x.is_file() and x.name.endswith('.ebuild')]:
                        update_python_compat(cat.name, pkg.name, ebuild.path)


# Commit to the local ebuild repo
ret = subprocess.run(['git', 'add', '.',], capture_output=False, cwd=EBUILDS_REPO_PATH, check=True)
cmd = ['git',
       'commit',
       '-m',
       'auto-sync from gentoo @ %s' % newGitHead
       ]
ret = subprocess.run(cmd, capture_output=False, cwd=EBUILDS_REPO_PATH, check=True)

# +default remote
ret = subprocess.run(['git', 'push', ], capture_output=False, cwd=EBUILDS_REPO_PATH, check=True)

# kate: encoding utf-8; eol unix
# kate: indent-width 4; mixedindent off; replace-tabs on; remove-trailing-spaces modified; space-indent on
# kate: word-wrap-column 200; word-wrap on
